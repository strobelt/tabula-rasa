<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="6679da28-b47b-471b-8547-832a3eee6a91" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__medley_1_4_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_test_check_1_1_1.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__compojure_1_6_2.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__compojure_1_6_3.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/libraries/Leiningen__medley_1_3_0.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.nrepl-port" beforeDir="false" afterPath="$PROJECT_DIR$/.nrepl-port" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/middleware/content_negotiation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/middleware/content_negotiation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/tabula-rasa.iml" beforeDir="false" afterPath="$PROJECT_DIR$/tabula-rasa.iml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
        <option value="Clojure Test Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="28oiBRtyC6nQ2FI0ITnklL6TFeI" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="cursive.last.file.extension./home/strobelt/git/tabula-rasa/src" value="clj" />
    <property name="cursive.last.file.extension./home/strobelt/git/tabula-rasa/test" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="SDKs" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/test/middleware" />
    </key>
  </component>
  <component name="ReplState" timestamp="1652675239441">{:repl-history {:ide [], :local [{:command &quot;(sort-by nil :order (map acceptable-formats formats))&quot;, :offset 53, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sort-by :order (filter nil? (map acceptable-formats formats)))&quot;, :offset 63, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sort-by :order (keep nil? (map acceptable-formats formats)))&quot;, :offset 61, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sort-by :order (filter (not nil?) (map acceptable-formats formats)))&quot;, :offset 69, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sort-by :order (filter some? (map acceptable-formats formats)))&quot;, :offset 64, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(some? (map acceptable-formats formats))&quot;, :offset 40, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;((get-preferred-formatter [\&quot;auisdbas\&quot;]) {:test 123 :another {:test 234}})&quot;, :offset 73, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(map acceptable-formats [\&quot;asdasd\&quot;])&quot;, :offset 35, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(first acceptable-formats)&quot;, :offset 26, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sorted-map acceptable-formats)&quot;, :offset 31, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sorted-map \&quot;application/json\&quot; {:order 0 :formatter 1})&quot;, :offset 55, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sorted-map \&quot;application/json\&quot; {:order 0 :formatter 1}\n            \&quot;application/edn\&quot; {:order 1 :formatter 2})&quot;, :offset 109, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(sorted-map-by #(&gt; (:order %1) (:order %2))\n               \&quot;application/json\&quot; {:order 0 :formmater 123}\n               \&quot;application/edn\&quot; {:order 1 :formatter 234})&quot;, :offset 163, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(into sorted-map acceptable-formats)&quot;, :offset 36, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(into (sorted-map) acceptable-formats)&quot;, :offset 38, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(into (sorted-map-by #(compare (get-in acceptable-formats [%1 :order]) (get-in acceptable-formats [%2 :order])))  acceptable-formats)&quot;, :offset 133, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(def x (into (sorted-map-by #(compare (get-in acceptable-formats [%1 :order]) (get-in acceptable-formats [%2 :order]))) acceptable-formats))&quot;, :offset 140, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;x&quot;, :offset 1, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(map x formats)&quot;, :offset 15, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat (map acceptable-formats [\&quot;asdasd\&quot;]) acceptable-formats)&quot;, :offset 63, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat (map acceptable-formats formats) acceptable-formats)&quot;, :offset 60, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(set (concat (map acceptable-formats formats) acceptable-formats))&quot;, :offset 66, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-preferred-formatter [\&quot;UHASDUHASU\&quot;])&quot;, :offset 40, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;((get-preferred-formatter formats) {:test 123 :another {:test 234}})&quot;, :offset 68, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(set (concat (get-preferred-formatter formats) (first acceptable-formats)))&quot;, :offset 75, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(set (concat (get-preferred-formatter formats) (seq (first acceptable-formats))))&quot;, :offset 81, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(map acceptable-formats formats)&quot;, :offset 32, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(select-keys acceptable-formats [\&quot;asdasd\&quot;])&quot;, :offset 43, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(select-keys acceptable-formats formats)&quot;, :offset 40, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat (select-keys acceptable-formats formats) (first acceptable-formats))&quot;, :offset 76, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat (select-keys acceptable-formats formats) (get acceptable-formats 0))&quot;, :offset 76, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat (select-keys acceptable-formats formats) (get acceptable-formats 2))&quot;, :offset 76, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat (select-keys acceptable-formats formats) (take 1 acceptable-formats))&quot;, :offset 77, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat (select-keys acceptable-formats [\&quot;asda\&quot;]) (take 1 acceptable-formats))&quot;, :offset 78, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-preferred-formatter formats)&quot;, :offset 33, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-preferred-formatter [])&quot;, :offset 28, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-preferred-formatter [\&quot;asdasd\&quot;])&quot;, :offset 36, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-preferred-formatter [\&quot;asd\&quot; \&quot;application/edn\&quot;])&quot;, :offset 51, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/conform even? 1000)&quot;, :offset 22, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/def ::format-handler {string? fn?})&quot;, :offset 38, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/conform ::format-handler 100)&quot;, :offset 32, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/conform ::format-handler (first acceptable-formats))&quot;, :offset 55, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/def ::format-handler (s/map-of string? fn?))&quot;, :offset 47, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/conform ::format-handler {\&quot;application/json\&quot; json/write-str})&quot;, :offset 64, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/valid? ::format-handler {\&quot;application/json\&quot; json/write-str})&quot;, :offset 63, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/valid? ::format-handler {\&quot;application/json\&quot; :a})&quot;, :offset 51, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/valid? ::format-handler acceptable-formats)&quot;, :offset 46, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/fdef get-formatter\n        :args (s/cat :handled-formats ::format-handler :formats (s/coll-of string?)))&quot;, :offset 107, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;'common.utils&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;'common.utilsa&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(require 'clojure.spec.test.alpha)&quot;, :offset 34, :ns &quot;user&quot;} {:command &quot;(-&gt; 'common.utils\n    )&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(ns common.utils)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(-&gt; 'common.utils\n    stest/enumerate-namespace\n    stest/check)&quot;, :offset 64, :ns &quot;common.utils&quot;} {:command &quot;(-&gt; 'common.utils\n    stest/enumerate-namespace\n    stest/check\n    stest/summarize-results)&quot;, :offset 92, :ns &quot;common.utils&quot;} {:command &quot;(-&gt; 'middleware.content-negotiation\n    stest/enume)&quot;, :offset 15} {:command &quot;(s/valid? (s/coll-of string?) [\&quot;application/json\&quot;])&quot;, :offset 51, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(concat [:a :b] :c)&quot;, :offset 19, :ns &quot;middleware.specs&quot;} {:command &quot;(concat [:a :b] (seq :c))&quot;, :offset 25, :ns &quot;middleware.specs&quot;} {:command &quot;(concat (:a :b) :c)&quot;, :offset 19, :ns &quot;middleware.specs&quot;} {:command &quot;(concat (:a :b) (:c))&quot;, :offset 21, :ns &quot;middleware.specs&quot;} {:command &quot;(-&gt; 'middleware.content-negotiation)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(-&gt; 'middleware.content-negotiation\n    stest/enumerate-namespace\n    stest/check\n    cloju)&quot;, :offset 9} {:command &quot;(require ['clojure.spec.test.alpha :as stest])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(require 'clojure.spec.test.alpha :as stest)&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(require 'clojure.spec.test.alpha :as stesta)&quot;, :offset 45, :ns &quot;user&quot;} {:command &quot;(-&gt; 'middleware.content-negotiation\n    stest/enumerate-namespace\n    stest/check-1)&quot;, :offset 84, :ns &quot;user&quot;} {:command &quot;(-&gt; 'middleware.content-negotiation\n    stest/enumerate-namespace\n    stest/check-fn)&quot;, :offset 85, :ns &quot;user&quot;} {:command &quot;(stest/nam)&quot;, :offset 11} {:command &quot;(-&gt; 'middleware.content-negotiation\n    stest/enumerate-namespace)&quot;, :offset 66, :ns &quot;user&quot;} {:command &quot;(-&gt; 'middleware.content-negotiation\n    stest/enumerate-namespace\n    stest/check)&quot;, :offset 82, :ns &quot;user&quot;} {:command &quot;(g/elements [\&quot;application/json\&quot; \&quot;application/edn\&quot;])&quot;, :offset 51, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/sample (g/elements [\&quot;application/json\&quot; \&quot;application/edn\&quot;]))&quot;, :offset 62, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(def ^:private gen-format #(g/elements [\&quot;application/json\&quot; \&quot;application/edn\&quot;]))&quot;, :offset 79, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(def ^:private gen-fn #(g/elements [str int map]))&quot;, :offset 50, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/sample (g/tuple gen-format gen-fn))&quot;, :offset 38, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/sample (g/tuple (gen-format) (gen-fn)))&quot;, :offset 42, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/sample (format-gen))&quot;, :offset 23, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/one-of (format-gen))&quot;, :offset 23, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/generator (format-gen))&quot;, :offset 26, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(def ^:private format-gen #(g/map (g/elements [\&quot;application/json\&quot; \&quot;application/edn\&quot;])\n                                    (g/elements [str int map])))&quot;, :offset 150, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/generate (format-gen))&quot;, :offset 25, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/valid? ::format-handler (g/generate (s/gen ::format-handler)))&quot;, :offset 65, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/generate (s/gen ::format-handler))&quot;, :offset 37, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(require '[clojure.spec.test.alpha :as stest])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(-&gt; 'middleware.content-negotiation\n    stest/enumerate-namespace\n    stest/check\n    stest/summarize-results)&quot;, :offset 110, :ns &quot;user&quot;} {:command &quot;(ns middleware.content-negotiation)&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(get-formatter [])&quot;, :offset 18, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-formatter acceptable-formats [])&quot;, :offset 37, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-formatter acceptable-formats nil)&quot;, :offset 38, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-formatter acceptable-formats)&quot;, :offset 34, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-formatter acceptable-formats [\&quot;as\&quot; \&quot;\&quot;])&quot;, :offset 44, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/sample (s/gen string?))&quot;, :offset 26, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-formatter acceptable-formats (g/sample (s/gen string?)))&quot;, :offset 61, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(get-formatter acceptable-formats (g/generate (s/gen (s/coll-of string?))))&quot;, :offset 75, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/sample (s/gen (s/coll-of string?)))&quot;, :offset 38, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(def ^:private format-gen #(g/map (#{\&quot;application/json\&quot; \&quot;application/edn\&quot;})\n                                  (#{str int map})))&quot;, :offset 128, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(def ^:private format-gen #(g/map #{\&quot;application/json\&quot; \&quot;application/edn\&quot;}\n                                  #{str int map}))&quot;, :offset 124, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(s/def ::format-handler (s/with-gen (s/map-of string? fn?) format-gen))&quot;, :offset 71, :ns &quot;middleware.content-negotiation&quot;} {:command &quot;(g/sample (s/gen ::format-handler))&quot;, :offset 35, :ns &quot;middleware.content-negotiation&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="Babashka" factoryName="BabashkaLocalRepl" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="bbPath" value="" />
      <setting name="parameters" value="" />
      <option name="PARENT_ENVS" value="true" />
      <setting name="workingDir" value="" />
      <setting name="focusEditor" value="false" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Start REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="tabula-rasa" />
      <setting name="displayName" value="Start REPL" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="6679da28-b47b-471b-8547-832a3eee6a91" name="Changes" comment="" />
      <created>1651889204675</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1651889204675</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="90e9b8ad-c161-4428-8064-28245791eba1">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="OPEN_GENERIC_TABS">
      <map>
        <entry key="90e9b8ad-c161-4428-8064-28245791eba1" value="TOOL_WINDOW" />
      </map>
    </option>
  </component>
</project>